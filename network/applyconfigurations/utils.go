// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/network/v1"
	networkv1 "github.com/openshift/client-go/network/applyconfigurations/network/v1"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=network.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("ClusterNetwork"):
		return &networkv1.ClusterNetworkApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ClusterNetworkEntry"):
		return &networkv1.ClusterNetworkEntryApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EgressNetworkPolicy"):
		return &networkv1.EgressNetworkPolicyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EgressNetworkPolicyPeer"):
		return &networkv1.EgressNetworkPolicyPeerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EgressNetworkPolicyRule"):
		return &networkv1.EgressNetworkPolicyRuleApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("EgressNetworkPolicySpec"):
		return &networkv1.EgressNetworkPolicySpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("HostSubnet"):
		return &networkv1.HostSubnetApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NetNamespace"):
		return &networkv1.NetNamespaceApplyConfiguration{}

	}
	return nil
}
